	var g, closing_data;
	var regression; // lin reg
	var coeffs = [ null, null, null ]; // lin reg

  	function display_graph_stats(company, time_frame){
  	   draw_graph(company, time_frame);
	   display_math(company, time_frame);
  	}

        function display_math(company, time_frame){
  	    if(company!=""){
			var json_array_data = $.ajax({
	      		type: 'POST',
	      		url: "front_router.php",
	      		data: 'c='+ company + '&t='+ time_frame + '&m=' + time_frame,
	      		dataType:"json",
	      		async: false
	    	}).responseText;
		
		console.log(json_array_data);
		var math = JSON.parse(json_array_data);

		document.getElementById('avg_div').innerHTML ="Average Closing Price: " + math[0];
		document.getElementById('sd_div').innerHTML ="Standard Deviation: " + math[1];
	    }
	}

  	function draw_graph(company, time_frame){
  		if(company!=""){

  			document.getElementById("linReg").style.display = "block";
	  		document.getElementById("clear_linReg").style.display = "block";
	  		document.getElementById("max_div").style.display = "block";
			document.getElementById("min_div").style.display = "block";

	    	console.log(company);

	    	var json_array_data = $.ajax({
	      		type: 'POST',
	      		url: "front_router.php",
	      		data: 'c='+ company + '&t='+ time_frame + '&g='+ time_frame,
	      		dataType:"json",
	      		async: false
	    	}).responseText; 
	    	
	    	//console.log(json_array_data);

	   		closing_data = JSON.parse(json_array_data);

	    	//console.log(closing_data);
	    	console.log(closing_data.length);
	    	var max = closing_data[0][1], min = closing_data[0][1];

		    for(var i=1; i<closing_data.length; i++){
		    	if(max < closing_data[i][1]){ max = closing_data[i][1]; }
		    	if(min > closing_data[i][1]){ min = closing_data[i][1]; }
		    }

	    	console.log("MAX : " + max + " | MIN:" + min);

	    	document.getElementById('max_div').innerHTML ="Max Closing Price: " + max;
	    	document.getElementById('min_div').innerHTML ="Min Closing Price: " + min;




			// ================ LIN REG ======================
			
			regression = function(series) {

		        // Only run the regression over visible points.
		        var range = g.xAxisRange();

		        var sum_xy = 0.0, sum_x = 0.0, sum_y = 0.0, sum_x2 = 0.0, num = 0;
		        console.log(g.numRows());
		        for (var i = 0; i < g.numRows(); i++) {
			        var x = g.getValue(i, 0);
			        //console.log("x:" +x);
			      	if (x < range[0] || x > range[1]) continue;

			        var y = g.getValue(i, series);
			        //console.log("y:" +y);
			        if (y === null || y === undefined) continue;
			        if (y.length == 2) {
			            // using fractions
			        	y = y[0] / y[1];
			        }

			        num++;
			        sum_x += x;
			        sum_y += parseFloat(y);
			        sum_xy += x * y;
			        sum_x2 += x * x;
		        }

		        //console.log("Num: " + num + " ")
		        //console.log("sumx: " + sum_x + " ")
		        //console.log("sumy: " + sum_y + " ")
		        //console.log("sumxy: " + sum_xy + " ")
		        //console.log("sumxx: " + sum_x2 + " ")

		        var a = (sum_xy - sum_x * sum_y / num) / (sum_x2 - sum_x * sum_x / num);
		        var b = (sum_y - a * sum_x) / num;
		        coeffs[series] = [b, a];
		        //coeffs[series] = [.6, .2];
		        if (typeof(console) != 'undefined') {
		          	//console.log("coeffs(" + series + "): [" + b + ", " + a + "]");
		        }

		        g.updateOptions({});  // forces a redraw.
	      	};

	      	

	      	function drawLines(ctx, area, layout) {
	        	if (typeof(g) == 'undefined') {
	        		//console.log("UNDEFINED NO");
	        		return;  // won't be set on the initial draw.
				}
		        var range = g.xAxisRange();
		        //console.log("range: " + range);
		        //console.log("YESS");
		        //console.log(coeffs.length);
		        for (var i = 0; i < coeffs.length; i++) {
		        	//console.log(coeffs[i]);
		          	if (!coeffs[i]) continue;
		          	//console.log("here");
		         	var a = coeffs[i][1];
		         	var b = coeffs[i][0];

		        	var x1 = range[0];
		          	var y1 = a * x1 + parseFloat(b);
		         	var x2 = range[1];
			        var y2 = a * x2 + parseFloat(b);

			        //console.log("X1: " + x1);
			        //console.log("y1: " + y1);
			        //console.log("x2: " + x2);
			        //console.log("y2: " + y2);

			        var p1 = g.toDomCoords(x1, y1);
			        var p2 = g.toDomCoords(x2, y2);



				    var c = Dygraph.toRGB_(g.getColors()[i - 1]);
				    c.r = Math.floor(255 - 0.5 * (255 - c.r));
				    c.g = Math.floor(255 - 0.5 * (255 - c.g));
				    c.b = Math.floor(255 - 0.5 * (255 - c.b));
				    var color = 'rgb(' + c.r + ',' + c.g + ',' + c.b + ')';
				    ctx.save();
				    ctx.strokeStyle = color;
				    ctx.lineWidth = 1.0;
				    ctx.beginPath();
				    ctx.moveTo(p1[0], p1[1]);
				    ctx.lineTo(p2[0], p2[1]);
				    //ctx.moveTo(0, 0);
				    //ctx.lineTo(10000, 3000);
				    ctx.closePath();
				    ctx.stroke();
				    ctx.restore(); 
				    //console.log("end draw");

		        }
	      	}	

	      

      		// ============ end lin reg =========

	    	g = new Dygraph(
	      		document.getElementById("graph_div"),
	      		closing_data, // Parsed Json 2-D Array being passed
	      	{ // START OF OPTIONS
	        	axes: {
	            	x: {
	                valueFormatter: Dygraph.dateString_,
	                axisLabelFormatter: Dygraph.dateAxisFormatter,
	                ticker: Dygraph.dateTicker
	            	}
	        	},
	        	//valueRange:[min*.95, max*1.05],
	        	underlayCallback: drawLines,
	        	labels: ['Date','Closing Price'],
	        	yRangePad: (max-min)*.2,
	        	ylabel: 'Closing Prices',
				zoomCallback: clear_lines,
	        	title: company + " " + time_frame + " Day"

	        	//visibility: [true, true,true,true, false, false]

	      	}); // END OF OPTIONS         

	    	clear_lines();

  	} else{ // NO COMPANY SELECTED
		document.getElementById("linReg").style.display = "none";
		document.getElementById("clear_linReg").style.display = "none";
		document.getElementById("max_div").style.display = "none";
		document.getElementById("min_div").style.display = "none";
	 	$('#graph_div').empty(); // Graph is cleared
	}
  	}

	function linear_regression()
	{
		regression(1);
		//document.getElementById("linReg_equation").innerHTML ="y = " + coeffs[1][0] + " + " + coeffs[1][1] + "x";
		//g.updateOptions({});
	}

	function clear_lines() 
	{
	    for (var i = 0; i < coeffs.length; i++) coeffs[i] = null;
	    g.updateOptions({});
	    //document.getElementById("linReg_equation").innerHTML ="";
	}


	function del_graph(company) {
               var x = confirm("Are you sure you want to delete this company?");
               if (x === true) {
                  console.log("x == true");
                   $.ajax({
                       type: 'POST',
                       url: "https://web.njit.edu/~al356/CDLCapital/index.php",
                       //data: "q="+company,
                       data: {dc: company},
                       dataType: "dataString",
                       async: false});
                   $(location).attr('href','https://web.njit.edu/~al356/CDLCapital/home.php');
               }
	}

     function calc_python(company){
     		console.log(company);
    		var strike_price=document.getElementById('strike_price');
    		var num_days=document.getElementById('num_days');
    		//num_days=parseInt(num_days);
    		//strike_price=parseInt(strike_price);
    		console.log(strike_price.value);
    		console.log(num_days.value);
    		var calculation = $.ajax({
    			type: 'POST',
    			url: "https://web.njit.edu/~al356/CDLCapital/front_router.php",
    			data: 'sp='+ strike_price.value + '&n='+ num_days.value + '&c='+ company,
    			dataType: "json",
    			async: false}).responseText;
    		
		console.log(calculation);
		var calculation1 = JSON.parse(calculation);
		
    		document.getElementById('py_test').innerHTML = "Fair European Option Price: " + calculation1[0];
		document.getElementById('py_test2').innerHTML = "Fair Exotic-Asian Option Price: " + calculation1[4];
		document.getElementById('py_test3').innerHTML = "Fair Exotic-Asian Option Price: " + calculation1[8];
     }; 